// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: mcp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelContextProtocol_Initialize_FullMethodName            = "/mcp.ModelContextProtocol/Initialize"
	ModelContextProtocol_CallMethod_FullMethodName            = "/mcp.ModelContextProtocol/CallMethod"
	ModelContextProtocol_CallMethodStream_FullMethodName      = "/mcp.ModelContextProtocol/CallMethodStream"
	ModelContextProtocol_ListTools_FullMethodName             = "/mcp.ModelContextProtocol/ListTools"
	ModelContextProtocol_ListPrompts_FullMethodName           = "/mcp.ModelContextProtocol/ListPrompts"
	ModelContextProtocol_GetPrompt_FullMethodName             = "/mcp.ModelContextProtocol/GetPrompt"
	ModelContextProtocol_ListResources_FullMethodName         = "/mcp.ModelContextProtocol/ListResources"
	ModelContextProtocol_ListResourceTemplates_FullMethodName = "/mcp.ModelContextProtocol/ListResourceTemplates"
	ModelContextProtocol_Complete_FullMethodName              = "/mcp.ModelContextProtocol/Complete"
	ModelContextProtocol_Ping_FullMethodName                  = "/mcp.ModelContextProtocol/Ping"
)

// ModelContextProtocolClient is the client API for ModelContextProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelContextProtocolClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResult, error)
	CallMethod(ctx context.Context, in *CallToolRequest, opts ...grpc.CallOption) (*CallToolResult, error)
	CallMethodStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CallToolRequest, CallToolResult], error)
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResult, error)
	ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResult, error)
	GetPrompt(ctx context.Context, in *GetPromptRequest, opts ...grpc.CallOption) (*GetPromptResult, error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResult, error)
	ListResourceTemplates(ctx context.Context, in *ListResourceTemplatesRequest, opts ...grpc.CallOption) (*ListResourceTemplatesResult, error)
	Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResult, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error)
}

type modelContextProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewModelContextProtocolClient(cc grpc.ClientConnInterface) ModelContextProtocolClient {
	return &modelContextProtocolClient{cc}
}

func (c *modelContextProtocolClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) CallMethod(ctx context.Context, in *CallToolRequest, opts ...grpc.CallOption) (*CallToolResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallToolResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_CallMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) CallMethodStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CallToolRequest, CallToolResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelContextProtocol_ServiceDesc.Streams[0], ModelContextProtocol_CallMethodStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CallToolRequest, CallToolResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelContextProtocol_CallMethodStreamClient = grpc.BidiStreamingClient[CallToolRequest, CallToolResult]

func (c *modelContextProtocolClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListToolsResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_ListTools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) ListPrompts(ctx context.Context, in *ListPromptsRequest, opts ...grpc.CallOption) (*ListPromptsResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPromptsResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_ListPrompts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) GetPrompt(ctx context.Context, in *GetPromptRequest, opts ...grpc.CallOption) (*GetPromptResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPromptResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_GetPrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) ListResourceTemplates(ctx context.Context, in *ListResourceTemplatesRequest, opts ...grpc.CallOption) (*ListResourceTemplatesResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourceTemplatesResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_ListResourceTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) Complete(ctx context.Context, in *CompleteRequest, opts ...grpc.CallOption) (*CompleteResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelContextProtocolClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResult)
	err := c.cc.Invoke(ctx, ModelContextProtocol_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelContextProtocolServer is the server API for ModelContextProtocol service.
// All implementations should embed UnimplementedModelContextProtocolServer
// for forward compatibility.
type ModelContextProtocolServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResult, error)
	CallMethod(context.Context, *CallToolRequest) (*CallToolResult, error)
	CallMethodStream(grpc.BidiStreamingServer[CallToolRequest, CallToolResult]) error
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResult, error)
	ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResult, error)
	GetPrompt(context.Context, *GetPromptRequest) (*GetPromptResult, error)
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResult, error)
	ListResourceTemplates(context.Context, *ListResourceTemplatesRequest) (*ListResourceTemplatesResult, error)
	Complete(context.Context, *CompleteRequest) (*CompleteResult, error)
	Ping(context.Context, *PingRequest) (*PingResult, error)
}

// UnimplementedModelContextProtocolServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelContextProtocolServer struct{}

func (UnimplementedModelContextProtocolServer) Initialize(context.Context, *InitializeRequest) (*InitializeResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedModelContextProtocolServer) CallMethod(context.Context, *CallToolRequest) (*CallToolResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallMethod not implemented")
}
func (UnimplementedModelContextProtocolServer) CallMethodStream(grpc.BidiStreamingServer[CallToolRequest, CallToolResult]) error {
	return status.Errorf(codes.Unimplemented, "method CallMethodStream not implemented")
}
func (UnimplementedModelContextProtocolServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedModelContextProtocolServer) ListPrompts(context.Context, *ListPromptsRequest) (*ListPromptsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrompts not implemented")
}
func (UnimplementedModelContextProtocolServer) GetPrompt(context.Context, *GetPromptRequest) (*GetPromptResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompt not implemented")
}
func (UnimplementedModelContextProtocolServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedModelContextProtocolServer) ListResourceTemplates(context.Context, *ListResourceTemplatesRequest) (*ListResourceTemplatesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceTemplates not implemented")
}
func (UnimplementedModelContextProtocolServer) Complete(context.Context, *CompleteRequest) (*CompleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedModelContextProtocolServer) Ping(context.Context, *PingRequest) (*PingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedModelContextProtocolServer) testEmbeddedByValue() {}

// UnsafeModelContextProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelContextProtocolServer will
// result in compilation errors.
type UnsafeModelContextProtocolServer interface {
	mustEmbedUnimplementedModelContextProtocolServer()
}

func RegisterModelContextProtocolServer(s grpc.ServiceRegistrar, srv ModelContextProtocolServer) {
	// If the following call pancis, it indicates UnimplementedModelContextProtocolServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelContextProtocol_ServiceDesc, srv)
}

func _ModelContextProtocol_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_CallMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).CallMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_CallMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).CallMethod(ctx, req.(*CallToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_CallMethodStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelContextProtocolServer).CallMethodStream(&grpc.GenericServerStream[CallToolRequest, CallToolResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelContextProtocol_CallMethodStreamServer = grpc.BidiStreamingServer[CallToolRequest, CallToolResult]

func _ModelContextProtocol_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_ListPrompts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPromptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).ListPrompts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_ListPrompts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).ListPrompts(ctx, req.(*ListPromptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_GetPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).GetPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_GetPrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).GetPrompt(ctx, req.(*GetPromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_ListResourceTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).ListResourceTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_ListResourceTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).ListResourceTemplates(ctx, req.(*ListResourceTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).Complete(ctx, req.(*CompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelContextProtocol_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelContextProtocolServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelContextProtocol_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelContextProtocolServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelContextProtocol_ServiceDesc is the grpc.ServiceDesc for ModelContextProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelContextProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.ModelContextProtocol",
	HandlerType: (*ModelContextProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _ModelContextProtocol_Initialize_Handler,
		},
		{
			MethodName: "CallMethod",
			Handler:    _ModelContextProtocol_CallMethod_Handler,
		},
		{
			MethodName: "ListTools",
			Handler:    _ModelContextProtocol_ListTools_Handler,
		},
		{
			MethodName: "ListPrompts",
			Handler:    _ModelContextProtocol_ListPrompts_Handler,
		},
		{
			MethodName: "GetPrompt",
			Handler:    _ModelContextProtocol_GetPrompt_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _ModelContextProtocol_ListResources_Handler,
		},
		{
			MethodName: "ListResourceTemplates",
			Handler:    _ModelContextProtocol_ListResourceTemplates_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _ModelContextProtocol_Complete_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ModelContextProtocol_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CallMethodStream",
			Handler:       _ModelContextProtocol_CallMethodStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mcp.proto",
}
